 1.创建线程
     添加线程库头文件
     #include <thread>
   
   tread thread1 (函数名,函数参数，函数参数，.......);
   
   thread1.join();         //等待进程结束
     thread1.joinable()      //是否可以使用join()
     thraad1.detach()        //脱离主程序单独运行
     

2.易错
     (1) 函数参数若为引用 须使用   ref(变量名)
   (2) 数据竞争  使用 互斥锁
             引用头文件 #include<mutex>
        mutex mux;
        mux.lock();
        {需要防止被竞争的数据}
        mux.unlock();
  （3）互斥量锁死 

3.扩展
    （1）互斥量上锁 
            例1：类外定义 mutex mtx;
                  函数内使用  lock_guard<mutex> 互斥锁名字(mtx);    //自动加锁
           数据
            例2：类外定义 mutex mtx;
           函数内使用 unique_lock<mutex> 自动锁名字（mtx);  （mtx 可追加：defer_lock//默认不加锁 程序员自己加锁  ）、

             设 互斥锁名字=lg  有一下上锁方法
                  lg.try_lock_for（chrono::seconds(秒数)）//尝试加锁 持续几秒  若超时未加锁成功则返回     注意：使用时间锁需改用time_mutex类型的互斥锁

        （2）语法
                   this_thread::sleep_for(chrono::miliseconds(100))    //线程停止100毫秒

 4.call_once//只执行一次  懒汉模式
     (1) 头文件#include<mutex>
         once_flag once;
         call_once(once,静态函数)； 

 5.condition_variable            
   #include<condition_variable>  //条件变量
     #include<queue>               //队列容器
     mutex mtx;
     unique_lock<mutex> lock (mtx);
     condition_variable 名字；         //例：名字=cov
   cov.wait(lock,bool);                   //停在当前行 

其他函数在需要等待条件变量的地方

使用 std::unique_lock<std::mutex> 对象锁定互斥锁

并调用 std::condition_variable::wait()、std::condition_variable::wait_for() 或 std::condition_variable::wait_until() 函数等待条件变量。

在其他线程中需要通知等待的线程时，调用 std::condition_variable::notify_one() 或 std::condition_variable::notify_all() 函数通知等待的线程。
          
     
